"""
Django settings for projet1djan project.

Generated by 'django-admin startproject' using Django 5.2.1.
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# Chemin de base du projet
BASE_DIR = Path(__file__).resolve().parent.parent

# Ajout du dossier apps dans le path Python (optionnel)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Sécurité
SECRET_KEY = os.getenv('SECRET_KEY', 'change-moi-urgent-en-prod')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Autoriser Render ou localhost
# ALLOWED_HOSTS attend une liste, on split la string par virgule et on strip les espaces
ALLOWED_HOSTS = [host.strip() for host in os.getenv('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')]

# Configuration base de données
if os.environ.get('RENDER'):
    # En production sur Render, utilise PostgreSQL via DATABASE_URL ou variables d'environnement
    # dj_database_url est pratique pour parser DATABASE_URL complète (ex: postgres://user:pass@host:port/dbname)
    DATABASE_URL = os.getenv('DATABASE_URL')
    if DATABASE_URL:
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600),
        }
    else:
        # Fallback si DATABASE_URL non défini, utilise variables individuelles
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('POSTGRES_DB'),
                'USER': os.getenv('POSTGRES_USER'),
                'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
                'HOST': os.getenv('POSTGRES_HOST'),
                'PORT': os.getenv('POSTGRES_PORT', '5432'),
                'OPTIONS': {
                    'client_encoding': 'UTF8',
                },
            }
        }
else:
    # En local, utilise SQLite (aucune config supplémentaire nécessaire)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Tes apps
    'accounts',
    'shop',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.ActiveUserMiddleware',  # Middleware custom si tu en as un
]

ROOT_URLCONF = 'projet1djan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'shop', 'templates'),
            os.path.join(BASE_DIR, 'accounts', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'shop.context_processors.categories_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'projet1djan.wsgi.application'

# Validation mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Langue et fuseau horaire
LANGUAGE_CODE = 'fr-FR'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_TZ = True

# Fichiers statiques
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Média (images uploadées)
MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'media'
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT, exist_ok=True)

# Clé primaire par défaut
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Utilisateur personnalisé
AUTH_USER_MODEL = 'accounts.CustomUser'

# Redirections après connexion / déconnexion
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

